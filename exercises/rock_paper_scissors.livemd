# Rock Paper Scissors

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Create the Perfect AI

You're going to create the perfect AI for rock paper scissors that will always win.

```mermaid
flowchart LR
scissors --beats--> paper --beats--> rock --beats--> scissors
```

Generate a random player choice of `:rock` ,`:paper`, or `:scissors` or manually enter `:rock`, `:paper`, and `:scissors` to determine your program works correctly.

<!-- livebook:{"force_markdown":true} -->

```elixir
player_choice = Enum.random([:rock, :paper, :scissors])
```

Then, return the winning choice of either `:rock`, `:paper`, or `:scissors` that beats the player's choice.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
  <summary>Hint</summary>

  Remember you can conditionally return values using boolean operators.
  For example, you can use this to return `:paper` if the `player_choice` is `:rock`.

  ```elixir
  player_choice = :rock

  player_choice == :rock && :paper
  ```

  Alternatively you can use `if` statements.

  ```elixir
  if player_choice == :rock, do: :paper
  ```

  You can use this in combination with re-binding the variable to
  return the winning choice.

  ```elixir
  player_choice = :scissors
  ai_choice = if player_choice == :rock, do: :paper
  ai_choice = if player_choice == :paper, do: :scissors, else: ai_choice
  if player_choice == :scissors, do: :rock, else: ai_choice
  ```

  Or you could chain a series of conditions without re-binding `player_choice`.

  ```elixir
  player_choice = :scissors
  
(player_choice == :rock && :paper) || (player_choice == :paper && :scissors) ||
  (player_choice == :scissors && :rock)
  ```

  There are also cleaner solutions using language features we have not yet covered
  such as the `case` statement.

  ```elixir
  player_choice = :scissors
  
  case player_choice do
    :rock -> :paper
    :paper -> :scissors
    :scissors -> :rock
  end
  ```
</details>

Enter your solution below.

```elixir
# player_choice = :lizard
player_choice = :rock

case player_choice do
  :rock -> :paper
  :paper -> :scissors
  :scissors -> :rock
  _ -> :error
end
```

## Create Two Player Rock Paper Scissors

Now that you know how to create a rock paper scissors AI, you're going to create a two player game of rock paper scissors.

Bind a `player1_choice` and `player2_choice` variable to `:rock`, `:paper`, or `:scissors`.

* If `player1_choice` beats `player2_choice`, return `"Player 1 wins!"`.
* If `player2_choice` beats `player1_choice`, return `"Player 2 wins!"`.
* If both players have the same choice, then return `"Draw"`.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
  <summary>Hint</summary>
  
  We can use boolean operators and/or `if` statements to create a sequence of conditions to determine the winner message.

  ```elixir
  player1 = :rock
  player2 = :scissors

  player1_won =
    (player1 == :rock and player2 == :scissors) or (player1 == :paper and player2 == :rock) or
      (player1 == :scissors and player2 == :paper)

  draw = player1 == player2

  winner_message = if player1_won, do: "Player 1 Wins!", else: "Player 2 Wins!"
  winner_message = if draw, do: "Draw", else: winner_message
  ```

  There are cleaner solutions using language features we have not covered yet such as `case`.

  ```elixir
  player1 = :rock
  player2 = :scissors

  case {player1, player2} do
    {:rock, :scissors} -> "Player 1 Wins!"
    {:paper, :rock} -> "Player 1 Wins!"
    {:scissors, :paper} -> "Player 1 Wins!"
    {:rock, :paper} -> "Player 2 Wins!"
    {:paper, :scissors} -> "Player 2 Wins!"
    {:scissors, :rock} -> "Player 2 Wins!"
    {_same, _same} -> "Draw"
  end
  ```

  You can also reduce code repetition using functions, which we have also not yet covered.

  ```elixir
  player1 = :rock
  player2 = :scissors

  beats? = fn choice1, choice2 ->
    {choice1, choice2} in [{:rock, :scissors}, {:paper, :rock}, {:scissors, :paper}]
  end

  cond do
    beats?(player1, player2) -> "Player1"
    beats?(player2, player1) -> "Player2"
    player1 == player2 -> "Draw"
  end
  ```

</details>

Enter your solution below.

```elixir
player1 = :rock
player2 = :scissors

case {player1, player2} do
  {:rock, :scissors} -> "Player 1 Wins!"
  {:paper, :rock} -> "Player 1 Wins!"
  {:scissors, :paper} -> "Player 1 Wins!"
  {:rock, :paper} -> "Player 2 Wins!"
  {:paper, :scissors} -> "Player 2 Wins!"
  {:scissors, :rock} -> "Player 2 Wins!"
  {_, _} -> "Draw"
end
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish rock paper scissors exercise"
```

## Up Next

| Previous                           | Next                                     |
| ---------------------------------- | ---------------------------------------: |
| [Mazes](../exercises/mazes.livemd) | [Functions](../reading/functions.livemd) |

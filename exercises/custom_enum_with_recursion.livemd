# Custom Enum With Recursion

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"},
  {:benchee, "~> 1.1"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Custom Enum With Recursion

We're going to use recursion to re-implement several of the [Enum](https://hexdocs.pm/elixir/Enum.html) module's functions. For this exercise
you are not allowed to use the [Enum](https://hexdocs.pm/elixir/Enum.html) module.

Implement the following [Enum](https://hexdocs.pm/elixir/Enum.html) functions in this `CustomEnum` function. Each should use recursion
to accomplish the same functionality as the [Enum](https://hexdocs.pm/elixir/Enum.html) module does.

* [Enum.reverse/2](https://hexdocs.pm/elixir/Enum.html#reverse/2)
* [Enum.map/2](https://hexdocs.pm/elixir/Enum.html#map/2)
* [Enum.filter/2](https://hexdocs.pm/elixir/Enum.html#filter/2)
* [Enum.sum/2](https://hexdocs.pm/elixir/Enum.html#sum/2)
* [Enum.join/1](https://hexdocs.pm/elixir/Enum.html#join/1)

Keep in mind you may need to delegate to another function if an accumulator is required.

For example,

<!-- livebook:{"force_markdown":true} -->

```elixir
defp recursive_map(list, function, acc) do
  # ...
end

def map(list, function) do
  recursive_map(list, function, [])
end
```

You only need to handle lists, not all collections.

```elixir
defmodule CustomEnum do
  @moduledoc """
  Documentation for `CustomEnum`.
  Re-implement common [Enum](https://hexdocs.pm/elixir/Enum.html) functions using recursion.
  """

  @doc """
  Reverse a list

  ## Examples

    iex> CustomEnum.reverse([1, 2, 3])
    [3, 2, 1]

    iex> CustomEnum.reverse([4, 5, 6, 7])
    [7, 6, 5, 4]
  """
  def reverse(list), do: reverse(list, [])

  def reverse(list, reversed) when length(list) == 0, do: reversed
  def reverse(list, reversed), do: reverse(tl(list), [hd(list) | reversed])

  @doc """
  Map over a list

  ## Examples

    iex> CustomEnum.map([1, 2, 3], fn integer -> integer * 2 end)
    [2, 4, 6]

    iex> CustomEnum.map([5, 4, 3], fn integer -> is_integer(integer) end)
    [true, true, true]
  """
  def map(list, callback_function), do: for(x <- list, do: callback_function.(x))

  @doc """
  Filter elements in a list. Keep elements that return `true` when called with the
  provided callback function.

  ## Examples

    iex> CustomEnum.filter([1, 2, "3"], fn int -> is_integer(int) end)
    [1, 2]

    iex> CustomEnum.filter([1, "2", "3"], fn char -> is_bitstring(char) end)
    ["2", "3"]
  """
  def filter([], _), do: []

  def filter([head | tail], fun) do
    if fun.(head) do
      [head | filter(tail, fun)]
    else
      filter(tail, fun)
    end
  end

  @doc """
  Sum a list of integers.

  ## Examples

    iex> CustomEnum.sum([1, 2, 3])
    6

    iex> CustomEnum.sum([1, 1, 1])
    3
  """
  def sum(list_of_integers), do: sum(list_of_integers, 0)
  def sum([], total), do: total
  def sum([h | t], total), do: sum(t, total + h)

  @doc """
  Join a list of strings together.

  ## Examples

    iex> CustomEnum.join(["A", "B", "C"])
    "ABC"

    iex> CustomEnum.join(["Hello", ",", " ", "World", "!"])
    "Hello, World!"
  """
  def join(list_of_strings), do: join(list_of_strings |> reverse, "")
  def join([], word), do: word
  def join([head | tail], word), do: join(tail, head <> word)
end
```

```elixir
# CustomEnum.reverse([1, 2, 3])     |> IO.inspect
# CustomEnum.reverse([4, 5, 6, 7])  |> IO.inspect

# CustomEnum.map([1, 2, 3], fn integer -> integer * 2 end)
# CustomEnum.map([5, 4, 3], fn integer -> is_integer(integer) end)

# CustomEnum.filter([1, 2, "3"], fn int -> is_integer(int) end)
# CustomEnum.filter([1, "2", "3"], fn char -> is_bitstring(char) end)

# CustomEnum.sum([1, 2, 3])
# CustomEnum.sum([1, 1, 1])

CustomEnum.join(["A", "B", "C"])
CustomEnum.join(["Hello", ",", " ", "World", "!"])
```

```elixir
lst = ?0..?z |> Enum.to_list() |> List.to_string() |> String.graphemes()
CustomEnum.join(lst)
```

## Benchmarking

We've installed the [Benchee](https://github.com/bencheeorg/benchee) project in this livebook.

Benchmark your solution against the existing [Enum](https://hexdocs.pm/elixir/Enum.html) module. Is yours faster or slower? Keep in mind that the [Enum](https://hexdocs.pm/elixir/Enum.html) module contains implementations for all enumerables, not just lists.

```elixir
# Data for larger "stress" tests
size = 10000
large_list = Enum.to_list(0..size)
# 75 characters
letters_list = ?0..?z |> Enum.to_list() |> List.to_string() |> String.graphemes()

# For later refactor
map_fun = &(&1 * 2)

Benchee.run(%{
  "Enum Reverse" => fn -> Enum.reverse([1, 2, 3]) end,
  "Custom Reverse" => fn -> CustomEnum.reverse([1, 2, 3]) end,
  "Enum Reverse Large" => fn -> Enum.reverse(large_list) end,
  "Custom Reverse Large" => fn -> CustomEnum.reverse(large_list) end,
  "Enum Map" => fn -> Enum.map([1, 2, 3], fn integer -> integer * 2 end) end,
  "Custom Map" => fn -> CustomEnum.map([1, 2, 3], fn integer -> integer * 2 end) end,
  "Enum Map Large" => fn -> Enum.map(large_list, fn integer -> integer * 2 end) end,
  "Custom Map Large" => fn -> CustomEnum.map(large_list, fn integer -> integer * 2 end) end,
  "Enum Filter" => fn -> Enum.filter([1, 2, "3"], fn int -> is_integer(int) end) end,
  "Custom Filter" => fn -> CustomEnum.filter([1, 2, "3"], fn int -> is_integer(int) end) end,
  "Enum Filter Large" => fn -> Enum.filter(large_list, &(rem(&1, 2) == 0)) end,
  "Custom Filter Large" => fn -> CustomEnum.filter(large_list, &(rem(&1, 2) == 0)) end,
  "Enum Sum" => fn -> Enum.sum([1, 2, 3]) end,
  "Custom Sum" => fn -> CustomEnum.sum([1, 2, 3]) end,
  "Enum Sum Large" => fn -> Enum.sum(large_list) end,
  "Custom Sum Large" => fn -> CustomEnum.sum(large_list) end,
  "Enum Join" => fn -> Enum.join(["A", "B", "C"]) end,
  "Custom Join" => fn -> CustomEnum.join(["A", "B", "C"]) end
})

# "Enum Join Large" => fn -> Enum.join(letters_list) end,
# "Custom Join Large" => fn -> CustomEnum.join(letters_list) end,
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish custom enum with recursion exercise"
```

## Up Next

| Previous                                           | Next                                                         |
| -------------------------------------------------- | -----------------------------------------------------------: |
| [Big O Notation](../reading/big_o_notation.livemd) | [Games Benchmarking](../exercises/games_benchmarking.livemd) |

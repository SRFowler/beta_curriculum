# Measurements

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Measurements

You are going to make a utility module for working with measurements.
This exercise was inspired by [Advent of Code 2021](https://adventofcode.com/), which is a fantastic resource for learning about Elixir through practical problems.

<!-- livebook:{"break_markdown":true} -->

<details style="background-color: lightgreen; padding: 1rem; border-radius: 0.5rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule Measurements do
  def increments(measurements) do
    measurements
    |> Enum.chunk_every(2, 1, :discard)
    |> Enum.map(fn [x, y] -> y - x end)
  end

  def increased(measurements) do
    measurements
    |> increments()
    |> Enum.count(&(&1 > 0))
  end

  def increased_by(measurements) do
    measurements
    |> increments()
    |> Enum.filter(&(&1 > 0))
    |> Enum.sum()
  end

  def average(measurements) do
    Enum.sum(measurements) / Enum.count(measurements)
  end
end
```
</details>

<!-- livebook:{"break_markdown":true} -->

Implement the `Measurements` module according to the documented function examples.

```elixir
defmodule Measurements do
  @doc """
  Given a list of measurements as integers, determine how many have increased.
  Each positive change since the previous integer in the list should count as an increase.

  ## Examples

    iex> Measurements.increased([1, 1, 2, 3, 1])
    2

    iex> Measurements.increased([1, 2, 1])
    1

    iex> Measurements.increased([3, 1, 2])
    1
  """
  def increased(measurements) do
    # measurements
    # # Break into groups of 2 with step of 1 so they overlap.
    # |> Enum.chunk_every(2, 1, :discard)
    # # Return true if the second number is larger
    # |> Enum.map(fn [x, y] -> y - x > 0 end)
    # |> Enum.count(fn item -> item == true end)  # Count of trues

    # Utilize increments function from below
    # increments(measurements)
    # |> Enum.count(fn item -> item > 0 end)

    # Using capture operator until it looks less weird
    increments(measurements)
    |> Enum.count(&(&1 > 0))
  end

  @doc """
  Given a list of measurements as integers, determine the increment between each integer.

  ## Examples

    iex> Measurements.increments([100, 150, 120, 130])
    [50, -30, 10]

    iex> Measurements.increments([10, 20, 10, 40])
    [10, -10, 30]
  """
  def increments(measurements) do
    measurements
    |> Enum.chunk_every(2, 1, :discard)
    |> Enum.map(fn [x, y] -> y - x end)
  end

  @doc """
  Given a list of measurements as integers, sum the amount they have increased by.
  Only positive increments are taken into account.

  ## Examples

    iex> Measurements.increased_by([100, 150, 120, 130])
    60

    iex> Measurements.increased_by([10, 20, 10, 40])
    40
  """
  def increased_by(measurements) do
    # This is increments above, just reduce to a list of positive numbers and sum that list
    increments(measurements)
    # |> Enum.filter(fn num -> num > 0 end)
    # Use the capture operator until it looks normal
    |> Enum.filter(&(&1 > 0))
    |> Enum.sum()
  end

  @doc """
  Find the average of a list of numbers.
  You can calculate average as sum of integers / length of list.

  ## Examples

    iex> Measurements.average([4, 5, 6])
    5

    iex> Measurements.average([2, 10])
    6
  """
  def average(measurements) do
    # Always returns a float
    (Enum.sum(measurements) / Enum.count(measurements))
    # Convert to int
    |> trunc
  end
end
```

```elixir
Measurements.increased([1, 1, 2, 3, 1])
```

```elixir
Measurements.increments([100, 150, 120, 130])
```

```elixir
Measurements.increased_by([100, 150, 120, 130])
```

```elixir
Measurements.average([2, 6])
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish measurements exercise"
```

## Up Next

| Previous                                             | Next                                                 |
| ---------------------------------------------------- | ---------------------------------------------------: |
| [Counting Votes](../exercises/counting_votes.livemd) | [Non Enumerables](../reading/non_enumerables.livemd) |
